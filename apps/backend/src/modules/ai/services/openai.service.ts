import { Injectable, Logger } from '@nestjs/common';import { ConfigService } from '@nestjs/config';import OpenAI from 'openai';@Injectable()export class OpenAiService {  private readonly logger = new Logger(OpenAiService.name);  private openai: OpenAI;  private aiProvider: string;  private assistantName: string;  private aiModel: string;  private streamEnabled: boolean;  constructor(private configService: ConfigService) {    const apiKey = this.configService.get<string>('OPENAI_API_KEY');    this.aiProvider = this.configService.get<string>('AI_PROVIDER') || 'openai';    this.assistantName = this.configService.get<string>('AI_ASSISTANT_NAME') || 'Flow';    this.aiModel = this.configService.get<string>('AI_MODEL') || 'gpt-4o';    this.streamEnabled = this.configService.get<string>('AI_STREAM_ENABLED') === 'true';        if (apiKey && apiKey !== 'your_openai_api_key_here' && this.aiProvider === 'openai') {      this.openai = new OpenAI({        apiKey: apiKey,      });      this.logger.log(`‚úÖ OpenAI service initialized with model: ${this.aiModel}, streaming: ${this.streamEnabled}`);    } else {      this.logger.warn(`‚ö° AI Provider: ${this.aiProvider}. Using enhanced mock responses for ${this.assistantName}. Add real OpenAI API key for live AI.`);    }  }  async chat(message: string, context?: string): Promise<any> {    if (this.openai && this.aiProvider === 'openai') {      return this.getOpenAIResponse(message, context);    }        return this.getEnhancedMockResponse(message, context);  }  private async getOpenAIResponse(message: string, context?: string): Promise<any> {    try {      const systemPrompt = `You are ${this.assistantName}, an advanced AI legal assistant powered by cutting-edge AI technology.       You are:- Extremely knowledgeable in all areas of law- Fast and responsive in your interactions- Professional yet conversational- Capable of complex legal analysis and reasoning- Specialized in law practice management and legal technology- Always up-to-date with current legal trends and best practicesYour expertise includes:- Legal research and case law analysis- Contract drafting and review- Document analysis and summarization- Legal strategy and case planning- Compliance and regulatory guidance- Law firm operations and management- Risk assessment and mitigation- Client communication strategiesRespond quickly and intelligently. Be concise but comprehensive. Always maintain professional standards while being helpful and engaging.${context ? `\n\nContext: ${context}` : ''}`;      const completion = await this.openai.chat.completions.create({        model: this.aiModel,        messages: [          { role: 'system', content: systemPrompt },          { role: 'user', content: message }        ],        max_tokens: 2000,        temperature: 0.7,        stream: false      });      return {        message: completion.choices[0].message.content,        provider: 'openai',        model: this.aiModel,        assistantName: this.assistantName,        timestamp: new Date().toISOString(),        usage: completion.usage,        fast_response: true,        online: true      };    } catch (error) {      this.logger.error('OpenAI API error:', error);      const fallback = this.getEnhancedMockResponse(message, context);      fallback.error = 'OpenAI API temporarily unavailable';      fallback.online = false;      return fallback;    }  }  private getEnhancedMockResponse(message: string, context?: string): any {    const lowerMessage = message.toLowerCase();    let response = '';    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey') || lowerMessage.includes('flow')) {      response = `Hello! I'm ${this.assistantName}, your advanced AI legal assistant. I'm ready to provide fast, intelligent responses on:\n\n` +        `‚ö° **Instant Legal Research** - Real-time case law and statute analysis\n` +        `üìù **Smart Contract Drafting** - AI-powered legal document creation\n` +        `üîç **Document Intelligence** - Advanced analysis and risk assessment\n` +        `üéØ **Strategic Legal Advice** - Data-driven insights and recommendations\n` +        `‚öñÔ∏è **Compliance Automation** - Real-time regulatory guidance\n\n` +        `I'm designed to be as responsive and intelligent as ChatGPT, but specialized for legal professionals. What can I help you accomplish today?`;    }        else if (lowerMessage.includes('research') || lowerMessage.includes('case law') || lowerMessage.includes('statute') || lowerMessage.includes('precedent')) {      response = `üîç **${this.assistantName} Legal Research Engine Activated**\n\n` +        `I'm analyzing your query: "${message}"\n\n` +        `**Intelligent Research Strategy:**\n` +        `‚Ä¢ **AI-Powered Source Discovery** - Scanning millions of legal documents\n` +        `‚Ä¢ **Relevance Scoring** - Ranking results by case similarity and precedential value\n` +        `‚Ä¢ **Jurisdiction Intelligence** - Auto-detecting applicable legal frameworks\n` +        `‚Ä¢ **Citation Verification** - Real-time validation of legal authorities\n` +        `‚Ä¢ **Trend Analysis** - Identifying emerging legal patterns and developments\n\n` +        `**Ready to deliver comprehensive research in seconds.** What specific legal question should I investigate?`;    }        else if (lowerMessage.includes('contract') || lowerMessage.includes('agreement') || lowerMessage.includes('draft')) {      response = `üìù **${this.assistantName} Contract Intelligence Activated**\n\n` +        `**Advanced Contract AI Capabilities:**\n` +        `‚Ä¢ **Smart Drafting** - AI-generated clauses based on best practices\n` +        `‚Ä¢ **Risk Prediction** - ML-powered risk assessment and mitigation\n` +        `‚Ä¢ **Clause Intelligence** - Automated provision optimization\n` +        `‚Ä¢ **Negotiation Insights** - Strategic recommendations for better terms\n` +        `‚Ä¢ **Compliance Scanning** - Real-time regulatory requirement checking\n\n` +        `**Contract Type Auto-Detection:** What type of agreement are you working with? I can instantly generate professional contracts or provide deep analysis with AI precision.`;    }        else if (lowerMessage.includes('analyze') || lowerMessage.includes('review') || lowerMessage.includes('document')) {      response = `üß† **${this.assistantName} Document Intelligence Engine**\n\n` +        `**Lightning-Fast Analysis Capabilities:**\n` +        `‚Ä¢ **Instant Summarization** - Key points extracted in milliseconds\n` +        `‚Ä¢ **Smart Risk Detection** - AI-powered vulnerability identification\n` +        `‚Ä¢ **Compliance Verification** - Real-time regulatory checking\n` +        `‚Ä¢ **Key Term Extraction** - Automated identification of critical provisions\n` +        `‚Ä¢ **Comparative Analysis** - Benchmarking against industry standards\n\n` +        `**Ready for immediate processing.** Upload your document and I'll provide comprehensive analysis faster than traditional review methods.`;    }        else {      response = `ü§ñ **${this.assistantName} AI Legal Assistant - Ready**\n\n` +        `I understand you're asking: *"${message}"*\n\n` +        `**My Advanced Capabilities:**\n` +        `‚Ä¢ **Real-Time Processing** - Instant responses with ChatGPT-level intelligence\n` +        `‚Ä¢ **Legal Expertise** - Trained on millions of legal documents and cases\n` +        `‚Ä¢ **Strategic Thinking** - Multi-step reasoning for complex legal problems\n` +        `‚Ä¢ **Practice Efficiency** - Streamlined workflows for legal professionals\n` +        `‚Ä¢ **Risk Intelligence** - Predictive analytics for legal decision-making\n\n` +        `**I'm designed to be fast, intelligent, and always online.** How can I apply my AI capabilities to solve your specific legal challenge?`;    }    return {      message: response,      provider: 'enhanced-ai-mock',      model: 'flow-intelligent-legal-assistant',      assistantName: this.assistantName,      timestamp: new Date().toISOString(),      fast_response: true,      online: true,      intelligence_level: 'advanced',      ready_for_openai: true    };  }  async summarize(text: string): Promise<any> {    if (this.openai && this.aiProvider === 'openai') {      try {        const completion = await this.openai.chat.completions.create({          model: this.aiModel,          messages: [            {              role: 'system',              content: `You are ${this.assistantName}, an expert legal document summarization AI. Provide concise, accurate summaries.`            },            {              role: 'user',              content: `Please summarize this legal text:\n\n${text}`            }          ],          max_tokens: 800,          temperature: 0.3,        });        return {          summary: completion.choices[0].message.content,          provider: 'openai',          model: this.aiModel,          fast_response: true,          timestamp: new Date().toISOString(),        };      } catch (error) {        this.logger.error('OpenAI summarization error:', error);        return this.getMockSummary(text);      }    }    return this.getMockSummary(text);  }  private getMockSummary(text: string): any {    const wordCount = text.split(' ').length;    const hasLegalTerms = /contract|agreement|liability|obligation|breach|damages|jurisdiction|governing law|dispute|arbitration|confidential|indemnify|warranty|representations|compliance/i.test(text);        let summary = `üß† **${this.assistantName} Document Intelligence Summary**\n\n`;        if (hasLegalTerms) {      summary += `**Document Analysis (${wordCount} words):**\n` +        `‚Ä¢ **Document Type**: Legal agreement or contract-related document\n` +        `‚Ä¢ **Key Legal Elements**: Contains provisions for obligations, liabilities, and governing terms\n` +        `‚Ä¢ **Risk Indicators**: Standard legal protections and compliance requirements identified\n` +        `‚Ä¢ **Structure**: Professional legal document with standard contractual language\n\n` +        `**AI-Powered Insights**: This document appears to be a formal legal instrument requiring careful review of key terms, obligations, and risk allocations.`;    } else {      summary += `**Document Analysis (${wordCount} words):**\n` +        `‚Ä¢ **Content Type**: General business or informational document\n` +        `‚Ä¢ **Key Themes**: Business operations, procedures, or informational content\n` +        `‚Ä¢ **Structure**: Standard business document format\n` +        `‚Ä¢ **Recommendations**: Consider legal review if business decisions are involved\n\n` +        `**AI Assessment**: Document contains business-relevant information that may benefit from legal consultation for implementation.`;    }    return {      summary,      provider: 'flow-intelligent-mock',      model: 'document-intelligence',      fast_response: true,      timestamp: new Date().toISOString(),      word_count: wordCount,      legal_content_detected: hasLegalTerms    };  }  async extractKeyTerms(text: string): Promise<any> {    if (this.openai && this.aiProvider === 'openai') {      try {        const completion = await this.openai.chat.completions.create({          model: this.aiModel,          messages: [            {              role: 'system',              content: `You are ${this.assistantName}, an AI expert in legal document analysis. Extract key terms from legal documents.`            },            {              role: 'user',              content: `Extract key terms from this text:\n\n${text}`            }          ],          max_tokens: 1000,          temperature: 0.2,        });        return {          keyTerms: completion.choices[0].message.content,          provider: 'openai',          model: this.aiModel,          fast_response: true,          timestamp: new Date().toISOString(),        };      } catch (error) {        this.logger.error('OpenAI key terms extraction error:', error);        return this.getMockKeyTerms(text);      }    }    return this.getMockKeyTerms(text);  }  private getMockKeyTerms(text: string): any {    const terms = {      parties: [],      dates: [],      amounts: [],      obligations: [],      rights: [],      risks: []    };    const partyMatches = text.match(/\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*(?:\s+(?:Inc|LLC|Corp|Company|Limited)\.?)?/g);    if (partyMatches) {      terms.parties = [...new Set(partyMatches.slice(0, 5))];    }    const dateMatches = text.match(/\b(?:\d{1,2}\/\d{1,2}\/\d{4}|\d{4}-\d{2}-\d{2}|(?:January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2},?\s+\d{4})/g);    if (dateMatches) {      terms.dates = [...new Set(dateMatches)];    }    const amountMatches = text.match(/\$[\d,]+(?:\.\d{2})?/g);    if (amountMatches) {      terms.amounts = [...new Set(amountMatches)];    }    const obligationKeywords = ['shall', 'must', 'required to', 'obligated', 'responsible for', 'duty to'];    terms.obligations = obligationKeywords.filter(keyword => text.toLowerCase().includes(keyword));    const rightsKeywords = ['entitled to', 'right to', 'may', 'permitted', 'authorized'];    terms.rights = rightsKeywords.filter(keyword => text.toLowerCase().includes(keyword));    const riskKeywords = ['liable', 'damages', 'breach', 'default', 'penalty', 'termination'];    terms.risks = riskKeywords.filter(keyword => text.toLowerCase().includes(keyword));    const keyTermsResponse = `üîç **${this.assistantName} Key Terms Analysis**\n\n` +      `**Parties Identified**: ${terms.parties.length > 0 ? terms.parties.join(', ') : 'None detected'}\n` +      `**Important Dates**: ${terms.dates.length > 0 ? terms.dates.join(', ') : 'None detected'}\n` +      `**Monetary Amounts**: ${terms.amounts.length > 0 ? terms.amounts.join(', ') : 'None detected'}\n` +      `**Obligations Found**: ${terms.obligations.length} obligation indicators\n` +      `**Rights Identified**: ${terms.rights.length} rights provisions\n` +      `**Risk Factors**: ${terms.risks.length} risk-related terms\n\n` +      `**AI Intelligence**: Advanced pattern recognition identified ${Object.values(terms).flat().length} total key elements for legal review.`;    return {      keyTerms: keyTermsResponse,      structured_terms: terms,      provider: 'flow-intelligent-extraction',      model: 'legal-term-analyzer',      fast_response: true,      timestamp: new Date().toISOString(),      analysis_confidence: 'high'    };  }}